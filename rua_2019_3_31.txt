weekly

1.pe文件
在 win16 平台上,使用的是 NE 格式.在 win32 平台上,使用 PE 格式.
EXE 与 DLL 区别在于语义上,它们同使用 PE 格式.区别在编码中用一个字段标出是 EXE 还是 DLL.
PE 文件有64位和32位的区分,但64位系统只是对于PE格式进行了一些简单的修饰.
其结构排列在内存中由低到高,与栈类似.
(由上到下)   块(section) -> 块表(section table) -> PE文件头 -> DOS首部
 
    11.1 基本概念
    PE文件使用平面地址的空间,代码和数据一起组成了一个很大的结构.文件内容被分割为不同的区块(section),windows的PE装载器决定哪一部分
    文件可以被用于映射到内存上.映射后两者的数据结构布局是一致的,但数据间的相对位置可能会改变.
    
    (1)基地址
    程序加载后,内存版本称为模块(module),映射文件起始地址称为模块句柄(hMoudle).模块句柄可以访问内存中其他数据结构.初始地址便称为基地址.(p406图)
    内存中模块代表进程将这个可执行文件所需数据使用的内存放在一个连续的内存块中.只需知道装载程序文件印像到内存中基地址后即可.
    PE文件剩余部分可读入,但可能无法映射.(不能映射部分被放置在尾部)

    在32位 Windows 中可以调用 GetMoudleHandle 函数获取指向此文件基地址的指针,其参数是文件名的字符串.
    
    *基地址由文件本身设定,使用vc++为 400000h,dll 为 10000000h.可在创建应用时改变基地址.

    (2) 虚拟地址
    pe文件被加载至内存中,每个文件都有自己的虚拟空间.
        可执行文件中,有许多地方要指定内存中地址例如,引用全局变量.
        尽管有基地址,但它们可以载入内存任何地方,不能依赖PE载入点,必须有一个方法指定地址.
        为了避免PE文件绝对内存,便引入了相对虚拟地址(RVA).计算方式如下:
            目标地址 401000h - 载入地址 400000h = RVA 1000h
            虚拟地址(VA) = 基地址 + 相对虚拟地址(RVA)

        文件偏移地址
        文件在磁盘时,数据位置相对于文件头的偏移量称为文件偏移地址(File Offset)或物理地址(RAW Offset)

    11.2 MS - DOS头
    PE文件以一个Dos程序开始的,有它Dos能识别出其为有效的执行体.其后跟着 MZ header 与 DOS stub.
    PE文件第一个结构位于 dos 头部,称为IMAGE_DOS_HEADER.(p407图)
    
    +0h         e_magic
    ......
    +3ch        e_lfanew
    
    e_magic 的 ACII值为 "MZ" ,DOS创建者之一的缩写.
    e_lfanew 字段是真正PE文件头的相对偏移(RVA),4字节,偏移 3Ch 处.

    11.3 PE文件头
    紧接着 DOS stub 的是PE相关结构NT映像头(IMAGE_NT_HEADERS).包含PE装载器能用到的一些字段.IMAGE_DOS_HEADER的e_lfanew加上基址,得到PE文件头指针.
        PNTHeader = ImageBase + dosHeader -> e_Ifanew
    其由三个字段组成:
        +0h     Signature
        +4h     FileHeader      //IMAGE_FILE_HEADER
        +18h    OptionalHeader

    (1) Signature 字段
    在有效的PE文件中,其值为 0x00004550,ACII为 PE00
    * e_lfanew是指向 PE\0\0 的.
    
    (2) IMAGE_FILE_HEADER 结构
    包含了PE文件的一些基本信息,此结构也能在 COFF 格式 .OBJ 文件找到.
        +04h Machine            WORD    ;运行平台
        //PE文件目标CPU类型.i386:14ch,Alpha AXP:184h.
        
        +06h NumberOfSection    WORD    ;文件区块数

        +08h TimeDataStamp      DWORD   ;文件创建时间
        //是自1070.1.1到现在的 GMT 计算的秒数.将其翻译成字符串需要 _ctime 函数(其对时区敏感),另一个是 gmtime.

        +0ch PointerToSymbolTable DWORD ;指向符号表(debug)
        //COFF符号表偏移位置.若无符号表,值为0.

        +10h NumberOfSymbols      DWORD   ;符号表中符号个数,用与寻找 COOF 符号表结束处.
        
        +14h SizeOfOptionalHeader WORD    ;IMAGE_OPTIONAL_HEADER32 结构大小.
        //其大小依赖与32位还是64位.通常,32位:00E0h 64位:00F0h

        +16h Characteristics      WORD    ;文件属性
        //通过几个值运算得到.一般,EXE 为 010fh,DLL 为 2102h.

    (3) IMAGE_OPTIONAL_HEADER 结构
            此结构是对于文件属性的补充.
        +1Ch SizeOfCode         DWORD   ;所有含有代码的区块大小.
        //这个值向上对齐某个值的整数倍,及对其一个扇区字节数的整数倍.

        +28h AddressOfEntryPoint DWORD  ;程序执行入口RVA

        +2Ch BaseOfCode          DWOED  ; 代码区块起始RVA

        +30h BaseOfData          DWORD  ; 数据区块起始RVA
        //通常在内存末尾,64位PE不会出现.

    11.4 区块表
        区块表在文件头偏移100h的地方开始,或使用 pe+18h+PE_head->IMAGE_FILE_HEADER.SizeOfOptionalHeader 确定位置.
        其是一个 IMAGE_NT_HEADERS 结构,区块的数量在PE_head->IMAGE_FILE_HEADER.NumberOfSections.
        
        虚拟地址与磁盘地址转换
            File Offset = RVA - △K
            其中△K是两者差值,每向前进一个区块,就要加上 虚拟内存页 - 磁盘页  的值.

    11.5 输入表
        PE文件被载入时,windows加载资源就是通过输入表寻找相关dll.
        *输入表从由 IMAGE_OPTIONAL_HEADER 中第二项确定位置.
            IID
            这是数据目录表指向的位置,是一个 IMAGE_IMPORT_DESCRIPTOR 结构
                

  2.pe注入中修改文件注入方式
    dllmain的调用:
    (参考链接:http://www.cppblog.com/AutomateProgram/archive/2010/03/15/109718.html)
        DllMain的第三个参数fdwReason(或 ul_reason_for_call)指明了系统调用Dll的原因，它可能是 DLL_PROCESS_ATTACH 、DLL_PROCESS_DETACH 、DLL_THREAD_ATTACH和DLL_THREAD_DETACH ,
        此时我们需要在 notebook.exe 打开时弹出对话框,由文章可知,dll第一次被加载内存中会运行dllmain,此时值为DLL_PROCESS_ATTACH.我们在其中添加代码
        以实现注入.
            DWORD WINAPI ThreadShow(LPVOID lpParameter)
                {
                	char szPath[MAX_PATH] = { 0 };
                	char  szBuf[1024] = { 0 };

                	GetModuleFileName(NULL, (LPWSTR)szPath, MAX_PATH);
                	sprintf(szPath, "已注入进程");
                	MessageBox(NULL, (LPCWSTR)szBuf, (LPCWSTR)"DLL Inject", MB_OK);
                	return 0;
                    }

            BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
                     )
                {
                	if (ul_reason_for_call == DLL_PROCESS_ATTACH)
                	{
                		CreateThread(NULL, 0, ThreadShow, NULL, 0, NULL);

                	}
                	return TRUE;
                }
    使用HxD打开文件,如果目前输入表所在的空间位置不够,所以需要找到最后一个块的位置,修改区块表用以给他增加一个对齐值(200h)的大小.然后把IID的所有内容放在
    对应位置上(其指向的位置是固定位置而不是相对位置),注意此时要增加一个IID用以存放注入的dll.随后在后面构造新的 OrginalFirstThunk ,name ,和FirstThunk.
    
    由于FirstThunk会在程序加载后被写入,所以接下来要修改其所在位置对应区块表的 Characteristics 属性,其值需要 | 0x80000000.
    最后清空数据目录表中的 Bound Table 项.(取消预先绑定的检查)